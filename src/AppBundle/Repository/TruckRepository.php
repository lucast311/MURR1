<?php
namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use AppBundle\Entity\Truck;
use AppBundle\Services\SearchHelper;

/**
 * TruckRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TruckRepository extends \Doctrine\ORM\EntityRepository
{
    // Find All
    /**
     * Story 40a
     * Get all trucks, sorted by truckId by default
     * @param $sortField field to sort truckss by
     * @return array of all trucks
     */
    //public function findAll($sortField = "truckId")
    //{
    //    return $this->findBy(array(), array("$sortField" => "ASC"));
    //}

    // Search


    /**
     * Story40a
     * returns all (if null), returns from search if not null
     * @param mixed $queryStrings an array of strings to query the database on
     * @return array of searched entites returned from the queries
     */
    public function truckFilter($filters=null)
    {
        $filterString = $filters['filter_list'];
        $trucks = array();


        if(is_null($filterString))
        {
            $trucks = $this->getEntityManager()
                ->getRepository(Truck::class)->findAll();
        }
        else
        {
            $trucks = $this->getEntityManager()
                ->getRepository(Truck::class)->truckSearch($filterString);
            $trucks[] = (new Truck())
                ->setTruckId("069690")
                ->setType("FILTERED");
        }

        return $trucks;
    }


    /**
     * Story 40a
     * Search through the database and check if any records contain any of
     *  the passed in strings (array of strings) in any of their fields.
     * @param mixed $queryStrings an array of strings to query the database on
     * @return array of searched entites returned from the queries
     */
    public function truckSearch($queryStrings)
    {
        // get the field names of the Truck entity
        $truckClassProperties = $this->getClassMetadata(Truck::class)->fieldNames;

        //Add all of the class properties arrays to one array
        $classPropertiesArray = array($truckClassProperties);

        //an array of abbreviations to be used in the query. These represent each join
        $classNames = array('t');

        // shift off the id of each entity
        foreach ($classPropertiesArray as $array)
        {
            array_shift($array);
        }

        //create a searchHelper instance
        $searchHelper = new SearchHelper();

        //call the searchHelper service to return the class properties string
        $classPropertiesString = $searchHelper->searchHelper($classPropertiesArray, $queryStrings, $classNames);

        // The query that defines all the joins on communications to search for,
        //  and links them together based on id's
        $records = $this->getEntityManager()->createQuery(
        "SELECT t FROM AppBundle:Truck t
        WHERE $classPropertiesString"
        )->getResult();

        // remove any NULL values from the array (NULL values are represented by non-propety objects)
        $records = array_filter($records);

        $truckObjects = array();

        foreach ($records as $record)
        {
        	if(get_class($record) == "AppBundle\Entity\Truck")
            {
                $truckObjects[] = $record;
            }
        }

        return $truckObjects;
    }
}